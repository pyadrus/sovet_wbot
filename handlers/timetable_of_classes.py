from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ParseMode
from loguru import logger

from services.services import load_bot_info, save_bot_info
from system.dispatcher import ADMIN_USER_ID, admin_texts
from system.dispatcher import dp, bot


@dp.callback_query_handler(lambda c: c.data == 'timetable_of_classes')
async def timetable_of_classes(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    greeting_keyboard = InlineKeyboardMarkup()
    sign_up_button = InlineKeyboardButton(text='üìù –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∑–∞–Ω—è—Ç–∏—è',
                                          callback_data='sign_up_for_classes')
    greeting_keyboard.row(sign_up_button)  # –ó–∞–ø–∏—Å–∞—Ç—å—Å—è
    data = load_bot_info(file_name='services/timetable_info.json')
    await bot.send_message(message.from_user.id,
                           text=data,
                           parse_mode=ParseMode.HTML,
                           disable_web_page_preview=True,
                           reply_markup=greeting_keyboard)


class EDIT(StatesGroup):
    edit = State()


@dp.message_handler(commands=['edit_timetable'])
async def edit_info_timetable(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /edit (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)"""
    logger.info(f"–ê–¥–º–∏–Ω {ADMIN_USER_ID} –ø–æ–ø—ã—Ç–∞–ª—Å—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")
    if message.from_user.id == int(ADMIN_USER_ID):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—è —Ä–∞–∑–º–µ—Ç–∫—É HTML.")
        # admin_texts[message.from_user.id] = True
        await EDIT.edit.set()
    else:
        await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")


@dp.message_handler(state=EDIT.edit)
async def update_info_timetable(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–¥–ª—è –∞–¥–º–∏–Ω–∞, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)"""
    text = message.html_text
    bot_info = text
    admin_texts.pop(message.from_user.id, None)  # –£–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    save_bot_info(file_name='services/timetable_info.json', data=bot_info)  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ JSON
    await message.reply("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞.", parse_mode=ParseMode.HTML)
    await state.finish()


def register_handlers_timetable_of_classes():
    dp.register_message_handler(timetable_of_classes)
    dp.register_message_handler(edit_info_timetable)
